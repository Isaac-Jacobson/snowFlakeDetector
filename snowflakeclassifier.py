# -*- coding: utf-8 -*-
"""SnowflakeClassifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DbeA56PM-jxsuN6h7quThdJvm_5Gb4Qn

#Snowflake Detector
"""

#Bonus cell just for executing linux commands

"""#Setup"""

#Install dependecies
!pip install -q tflite-model-maker
!pip install -q tflite-support

#Needed imports although matplotlib, numpy,and pandas aren't currently used but will probably be needed
import tensorflow as tf

from tflite_model_maker.config import ExportFormat
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

import numpy as np
import pandas as pd
import matplotlib as plt

import os

"""#Get the data and base model"""

#Picking what base model to use, efficientdet is just a starting place
#spec = model_spec.get('efficientdet_lite0')
#spec = model_spec.get('efficientdet_lite2')
spec = model_spec.get('efficientdet_lite4')

#Get dat data
!curl -L "https://app.roboflow.com/ds/fosD79eC34?key=xH3OhXG8fK" > data.zip
!unzip data.zip; rm data.zip

#I'm working on automating the jpeg and csv manipulation but right now I still hand format the csv

#!mkdir data
!mv ./test/*.jpg .
!mv ./train/*.jpg .
!mv ./valid/*.jpg .
#!mkdir annotations
#!mv ./test/*.csv ./annotations/test.csv
#!mv ./train/*.csv ./annotations/train.csv
#!mv ./valid/*.csv ./annotations/valid.csv
#!rm ./merged.csv
#!head -n 1 ./annotation/train.csv > merged.csv && tail -n+2 -q ./annotation/*.csv >> merged.csv

"""#Train and test"""

train_data, validation_data, test_data = object_detector.DataLoader.from_csv('./data/annotations.csv')

print(test_data.label_map)

# train_whole_model, controls layers being trained, setting to false uses transfer learning to train and
# only trains layers that don't match model_spec.config.var_freeze_expr.
model = object_detector.create(train_data, model_spec=spec, epochs = 5, batch_size=1, train_whole_model=True, validation_data=validation_data)

model.summary()

"""#Test"""

#Needs a bigger test set

#Prints mAP for whole model and specifically for each piece (class)
model.evaluate(test_data, batch_size=1)

"""#Making and Testing the tflite version"""

# Defaults to post training full integer quantization when exported to tflite file
model.export(export_dir='.')

#Prints mAP for whole model and specifically for each piece (class)
model.evaluate_tflite('model.tflite', test_data)

"""#Mount google drive for exports"""

#link drive for easy saving, although just downloading the model is easier
from google.colab import drive
drive.mount('/content/drive')